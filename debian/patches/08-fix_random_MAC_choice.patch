From: Anders Sundman <anders@4zm.org>
Subject: ensure random new MAC is not same as old MAC
 When requesting a random MAC with or without some specific prefix there is a
 small probability (1 / 2^24 for -e) that the new adress is the same as the
 old one. However unlikely, we don't want that.
 .
 If the requested mac is the same as the current mac; don't even try to change
 it. Print an error message instead.

---
 src/mac.c  |   43 +++++++++++++++++++++++++++++--------------
 src/main.c |   28 ++++++++++++++--------------
 2 files changed, 43 insertions(+), 28 deletions(-)

--- macchanger.orig/src/mac.c
+++ macchanger/src/mac.c
@@ -41,6 +41,13 @@ mc_mac_dup (const mac_t *mac)
 	return new;
 }
 
+void
+mc_mac_copy (const mac_t *src_mac, mac_t *dst_mac)
+{
+	int i = 0;
+	for (i = 0; i < 6; ++i)
+		dst_mac->byte[i] = src_mac->byte[i];
+}
 
 void
 mc_mac_free (mac_t *mac)
@@ -67,20 +74,28 @@ mc_mac_random (mac_t *mac, unsigned char
 	 * x1:, x3:, x5:, x7:, x9:, xB:, xD: and xF:
 	 */
 
-	switch (last_n_bytes) {
-	case 6:
-		mac->byte[0] = (random()%255) & 0xFE;
-	case 5:
-		mac->byte[1] = random()%255;
-	case 4:
-		mac->byte[2] = random()%255;
-	case 3:
-		mac->byte[3] = random()%255;
-	case 2:
-		mac->byte[4] = random()%255;
-	case 1:
-		mac->byte[5] = random()%255;
-	}
+	mac_t newmac;
+	mc_mac_copy(mac, &newmac);
+
+	/* Make sure we really get a new MAC */
+	do {
+		switch (last_n_bytes) {
+		case 6:
+			newmac.byte[0] = (random()%255) & 0xFE;
+		case 5:
+			newmac.byte[1] = random()%255;
+		case 4:
+			newmac.byte[2] = random()%255;
+		case 3:
+			newmac.byte[3] = random()%255;
+		case 2:
+			newmac.byte[4] = random()%255;
+		case 1:
+			newmac.byte[5] = random()%255;
+		}
+	} while (mc_mac_equal (&newmac, mac));
+
+	mc_mac_copy(&newmac, mac);
 }
 
 
--- macchanger.orig/src/main.c
+++ macchanger/src/main.c
@@ -225,23 +225,23 @@ main (int argc, char *argv[])
 		mc_mac_next (mac_faked);
 	}
 
-	/* Set the new MAC */
-	if (mc_net_info_set_mac (net, mac_faked) >= 0) {
-		/* Re-read the MAC */
-		mc_mac_free (mac_faked);
-		mac_faked = mc_net_info_get_mac(net);
+	/* Is the same MAC? */
+	if (mc_mac_equal (mac, mac_faked)) {
+		printf ("It's the same MAC!!\n");
 
-		/* Print it */
-		print_mac ("New       MAC: ", mac_faked);
+		ret = 1;
+	} else {
+		/* Set the new MAC */
+		if (mc_net_info_set_mac (net, mac_faked) >= 0) {
+			/* Re-read the MAC */
+			mc_mac_free (mac_faked);
+			mac_faked = mc_net_info_get_mac(net);
 
-		/* Is the same MAC? */
-		if (mc_mac_equal (mac, mac_faked)) {
-			printf ("It's the same MAC!!\n");
-		}
+			/* Print it */
+			print_mac ("New       MAC: ", mac_faked);
 
-		ret = 0;
-	} else {
-		ret = 1;
+			ret = 0;
+		}
 	}
 
 	/* Memory free */
